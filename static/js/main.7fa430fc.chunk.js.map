{"version":3,"sources":["components/square/square.jsx","components/board/board.jsx","components/game/game.jsx","components/getDim/getDim.jsx","index.jsx"],"names":["Square","props","className","onClick","value","Board","start","end","rows","i","push","this","renderSquare","board_r","new_r","new_end","parseInt","create_rq","squares","create_row","React","Component","Game","state","stepNumber","xIsNext","row_length","board_rows","count","x","o","index","j","k","z","y","hor","vert","rl_cross","lr_cross","hist","history","board","calculateWinner","setState","length","small","status","moves","check","step","pop","winner","isSmall","map","move","desc","key","jumpTo","handleClick","GetDim","handleWindowResize","window","innerWidth","winning","handleInputChange","bind","event","target","name","addEventListener","removeEventListener","e","preventDefault","confirm","refs","alert","how","ref","type","onChange","how_many","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fa430fc.chunk.js","sourcesContent":["import React from 'react';\nimport './square.css';\n\nexport default function Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n","import React from 'react';\nimport Square from '../square/square';\nimport './board.css';\n\nexport default class Board extends React.Component {\n  create_rq(start, end) {\n    const rows = [];\n    for (let i = start; i < end; i++) {\n      rows.push(this.renderSquare(i));\n    }\n    return rows;\n  }\n\n  create_row(start) {\n    const board_r = [];\n    for (let i = 0; i < start; i++) {\n      const new_r = i * start;\n      const new_end = parseInt(new_r) + parseInt(start);\n      board_r.push(\n        <div className=\"board-row\">{this.create_rq(new_r, new_end)}</div>\n      );\n    }\n    return board_r;\n  }\n\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n  render() {\n    return <div>{this.create_row(this.props.rows)}</div>;\n  }\n}\n","import React from 'react';\nimport Board from '../board/board';\nimport './game.css';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stepNumber: 0, // count var\n      xIsNext: true,\n    };\n  }\n\n  hor(squares, row_length, board_rows, count, x, o) {\n    let index = 0;\n    for (let i = 0; i < board_rows; i++) {\n      for (let j = 0; j < board_rows; j++) {\n        if (squares[index] === 'X') {\n          x++;\n          o = 0;\n          count++;\n        } else if (squares[index] === 'O') {\n          o++;\n          x = 0;\n          count++;\n        } else {\n          count = 0;\n        }\n        index++;\n        if (o >= row_length && count >= row_length) {\n          return 'O';\n        }\n        if (x >= row_length && count >= row_length) {\n          return 'X';\n        }\n      }\n      x = 0;\n      o = 0;\n    }\n  }\n\n  vert(squares, row_length, board_rows, count, x, o) {\n    for (let i = 0; i < board_rows; i++) {\n      for (let j = i; j < board_rows ** 2; j += board_rows) {\n        if (squares[j] === 'X') {\n          x++;\n          o = 0;\n          count++;\n        } else if (squares[j] === 'O') {\n          o++;\n          x = 0;\n          count++;\n        } else {\n          count = 0;\n        }\n        if (o >= row_length && count >= row_length) {\n          return 'O';\n        }\n        if (x >= row_length && count >= row_length) {\n          return 'X';\n        }\n      }\n      x = 0;\n      o = 0;\n    }\n  }\n\n  rl_cross(squares, row_length, board_rows, count, x, o) {\n    for (let k = 0; k < board_rows ** 2; k++) {\n      for (let i = k; i < board_rows ** 2; i += board_rows + 1) {\n        if (squares[i] === 'X') {\n          x++;\n          o = 0;\n          count++;\n        } else if (squares[i] === 'O') {\n          o++;\n          x = 0;\n          count++;\n        } else {\n          count = 0;\n        }\n        for (let z = board_rows - 1; z < board_rows ** 2; z += board_rows) {\n          if (i === z) {\n            break;\n          }\n        }\n        for (let y = board_rows * (board_rows - 1); y < board_rows ** 2; y++) {\n          if (i === y) {\n            break;\n          }\n        }\n        if (o >= row_length && count >= row_length) {\n          return 'O';\n        }\n        if (x >= row_length && count >= row_length) {\n          return 'X';\n        }\n      }\n      o = 0;\n      x = 0;\n    }\n  }\n\n  lr_cross(squares, row_length, board_rows, count, x, o) {\n    for (let k = 0; k < board_rows ** 2; k++) {\n      for (let i = k; i < board_rows ** 2; i += board_rows - 1) {\n        if (squares[i] === 'X') {\n          x++;\n          o = 0;\n          count++;\n        } else if (squares[i] === 'O') {\n          o++;\n          x = 0;\n          count++;\n        } else {\n          count = 0;\n        }\n        for (let z = board_rows; z < board_rows ** 2; z += board_rows) {\n          if (i === z) {\n            break;\n          }\n        }\n        for (let y = board_rows * (board_rows - 1); y < board_rows ** 2; y++) {\n          if (i === y) {\n            break;\n          }\n        }\n        if (o >= row_length && count >= row_length) {\n          return 'O';\n        }\n        if (x >= row_length && count >= row_length) {\n          return 'X';\n        }\n      }\n\n      o = 0;\n      x = 0;\n    }\n  }\n\n  calculateWinner(squares, rows) {\n    const count = 0;\n    const x = 0;\n    const o = 0;\n    const board_rows = this.props.board_rows;\n    if (this.hor(squares, rows, board_rows, count, x, o)) {\n      return this.hor(squares, rows, board_rows, count, x, o);\n    }\n    if (this.vert(squares, rows, board_rows, count, x, o)) {\n      return this.vert(squares, rows, board_rows, count, x, o);\n    }\n    if (this.rl_cross(squares, rows, board_rows, count, x, o)) {\n      return this.rl_cross(squares, rows, board_rows, count, x, o);\n    }\n    if (this.lr_cross(squares, rows, board_rows, count, x, o)) {\n      return this.lr_cross(squares, rows, board_rows, count, x, o);\n    }\n    return null;\n  }\n\n  handleClick(i) {\n    const hist = this.props.history;\n    const squares = this.props.board;\n    const rows = this.props.rows;\n    if (this.calculateWinner(squares, rows) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    hist.push(i);\n    if (this.calculateWinner(squares, rows)) {\n      this.setState({\n        stepNumber: 0,\n        xIsNext: true, // changes turn\n      });\n    } else {\n      this.setState({\n        stepNumber: this.props.history.length,\n        xIsNext: !this.state.xIsNext, // changes turn\n      });\n    }\n  }\n\n  check(small, status, rows, moves, check) {\n    if (small && !check) {\n      return (\n        <div className=\"game-info\">\n          <br />\n          <div>{status}</div>\n          <div>{rows} in a row</div>\n          <ol>{moves}</ol>\n        </div>\n      );\n    } else if (!small && check) {\n      return (\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>{rows} in a row</div>\n          <ol>{moves}</ol>\n        </div>\n      );\n    }\n  }\n\n  jumpTo(history, board, step) {\n    for (let i = history.length - 1; i >= step; i--) {\n      board[history.pop()] = null;\n    }\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const board = this.props.board;\n    const history = this.props.history;\n    const rows = this.props.rows;\n    const winner = this.calculateWinner(board, rows);\n    const small = this.props.isSmall;\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Refresh';\n\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(history, board, move)}>\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n\n    winner\n      ? (status = 'Winner: ' + winner)\n      : (status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'));\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            rows={this.props.board_rows}\n            squares={board}\n            onClick={(i) => this.handleClick(i)}\n          />\n          {this.check(small, status, rows, moves, 0)}\n        </div>\n        {this.check(small, status, rows, moves, 1)}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Game from '../game/game';\nimport './getDim.css';\n\nexport default class GetDim extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      rows: 3,\n      winning: 3,\n      board: [],\n      history: [],\n      xIsNext: true,\n      isSmall: false,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleInputChange(event) {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleWindowResize = () => {\n    this.setState({ isSmall: window.innerWidth < 768 });\n  };\n\n  componentDidMount() {\n    this.handleWindowResize();\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize);\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    if (window.confirm('It will refresh the game! Continue?')) {\n      if (this.refs.rows.value < 3 || this.refs.rows.value > 10) {\n        alert('3-10 only');\n      } else {\n        this.setState({\n          rows: this.refs.rows.value,\n          board: [],\n          history: [],\n          xIsNext: true,\n        });\n      }\n    }\n  }\n\n  how_many(rows) {\n    let how = [];\n    for (let i = 3; i <= rows; i++) {\n      how.push(<option value={i}>{i}</option>);\n    }\n    return how;\n  }\n\n  render() {\n    return (\n      <div className=\"submission\">\n        <div className=\"game_name\">Tic Tac Toe</div>\n        <form>\n          <label className=\"size\">\n            Board Size\n            <br />\n            <input ref=\"rows\" type=\"number\" />\n            <button\n              className=\"submit\"\n              onClick={(e) => {\n                this.handleClick(e);\n              }}\n            >\n              Change\n            </button>\n          </label>\n        </form>\n\n        <label className=\"win\">\n          <select\n            className=\"win_select\"\n            name=\"winning\"\n            value={this.state.winning}\n            onChange={this.handleInputChange}\n          >\n            {this.how_many(this.state.rows)}\n          </select>\n          In a Row\n          <br />\n        </label>\n\n        <Game\n          rows={parseInt(this.state.winning)}\n          board_rows={parseInt(this.state.rows)}\n          board={this.state.board}\n          history={this.state.history}\n          xIsNext={this.state.xIsNext}\n          isSmall={this.state.isSmall}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GetDim from './components/getDim/getDim';\n\n// ========================================\n\n// renders the game component to element\n\nReactDOM.render(<GetDim />, document.getElementById('root'));\n"],"sourceRoot":""}