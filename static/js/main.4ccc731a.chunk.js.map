{"version":3,"sources":["components/square/square.jsx","components/board/board.jsx","components/game/game.jsx","components/getDim/getDim.jsx","index.jsx"],"names":["Square","props","className","onClick","value","Board","i","this","squares","start","end","rows","push","renderSquare","board_r","new_r","new_end","parseInt","create_rq","create_row","React","Component","Game","state","history","stepNumber","xIsNext","row_length","board_rows","count","x","o","index","j","hor","vert","cross","hist","board","calculateWinner","setState","length","step","pop","status","winner","moves","map","move","desc","key","jumpTo","handleClick","GetDim","winning","handleInputChange","bind","event","target","name","e","preventDefault","window","confirm","refs","alert","how","ref","type","onChange","how_many","ReactDOM","render","document","getElementById"],"mappings":"+UAGe,SAASA,EAAOC,GAC7B,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,UCFQC,E,2KACNC,GAAI,IAAD,OACd,OACE,kBAACN,EAAD,CACEI,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,gCAI9BG,EAAOC,GAEf,IADA,IAAIC,EAAO,GACFL,EAAIG,EAAOH,EAAII,EAAKJ,IAC3BK,EAAKC,KAAKL,KAAKM,aAAaP,IAE9B,OAAOK,I,iCAEEF,GAET,IADA,IAAIK,EAAU,GACLR,EAAI,EAAGA,EAAIG,EAAOH,IAAK,CAC9B,IAAIS,EAAQT,EAAIG,EACZO,EAAUC,SAASF,GAASE,SAASR,GACzCK,EAAQF,KACN,yBAAKV,UAAU,aAAaK,KAAKW,UAAUH,EAAOC,KAGtD,OAAOF,I,+BAGP,OAAO,6BAAMP,KAAKY,WAAWZ,KAAKN,MAAMU,W,GA5BTS,IAAMC,WCApBC,G,wDACnB,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CACXC,QAAS,GACTC,WAAY,EACZC,SAAS,GALM,E,gDASflB,EAASmB,EAAYC,EAAYC,EAAOC,EAAGC,GAE7C,IADA,IAAIC,EAAQ,EACH1B,EAAI,EAAGA,EAAIsB,EAAYtB,IAAK,CACnC,IAAK,IAAI2B,EAAI,EAAGA,EAAIL,EAAYK,IAAK,CAanC,GAZuB,MAAnBzB,EAAQwB,IACVF,IACAC,EAAI,EACJF,KAC4B,MAAnBrB,EAAQwB,IACjBD,IACAD,EAAI,EACJD,KAEAA,EAAQ,EAEVG,IACID,GAAKJ,GAAcE,GAASF,EAC9B,MAAO,IAET,GAAIG,GAAKH,GAAcE,GAASF,EAC9B,MAAO,IAGXG,EAAI,EACJC,EAAI,K,2BAIHvB,EAASmB,EAAYC,EAAYC,EAAOC,EAAGC,GAC9C,IAAK,IAAIzB,EAAI,EAAGA,EAAIsB,EAAYtB,IAAK,CACnC,IAAK,IAAI2B,EAAI3B,EAAG2B,EAAC,SAAGL,EAAc,GAAGK,GAAKL,EAAY,CAYpD,GAXmB,MAAfpB,EAAQyB,IACVH,IACAC,EAAI,EACJF,KACwB,MAAfrB,EAAQyB,IACjBF,IACAD,EAAI,EACJD,KAEAA,EAAQ,EAENE,GAAKJ,GAAcE,GAASF,EAC9B,MAAO,IAET,GAAIG,GAAKH,GAAcE,GAASF,EAC9B,MAAO,IAGXG,EAAI,EACJC,EAAI,K,4BAIFvB,EAASmB,EAAYE,EAAOC,EAAGC,GACnC,IAAK,IAAIzB,EAAI,EAAGA,EAAC,SAAGqB,EAAc,GAAGrB,GAAKqB,EAAa,EAClC,MAAfnB,EAAQF,IACVwB,IAEiB,MAAftB,EAAQF,IACVyB,IAIJ,GAAIA,IAAMJ,EACR,MAAO,IAET,GAAIG,IAAMH,EACR,MAAO,IAETI,EAAI,EACJD,EAAI,EAEJ,IAAK,IAAIG,EAAIN,EAAa,EAAGM,EAAI,SAAAN,EAAc,GAAI,EAAGM,GAAKN,EAAa,EACnD,MAAfnB,EAAQyB,IACVH,IAEiB,MAAftB,EAAQyB,IACVF,IAIJ,OAAIA,IAAMJ,EACD,IAELG,IAAMH,EACD,KAETI,EAAI,OACJD,EAAI,M,sCAGUtB,EAASG,GACvB,IAGMiB,EAAarB,KAAKN,MAAM2B,WAC9B,OAAIrB,KAAK2B,IAAI1B,EAASG,EAAMiB,EAJd,EACJ,EACA,GAGDrB,KAAK2B,IAAI1B,EAASG,EAAMiB,EALnB,EACJ,EACA,GAKNrB,KAAK4B,KAAK3B,EAASG,EAAMiB,EAPf,EACJ,EACA,GAMDrB,KAAK4B,KAAK3B,EAASG,EAAMiB,EARpB,EACJ,EACA,GAQNrB,KAAK6B,MAAM5B,EAASG,EAVV,EACJ,EACA,GASDJ,KAAK6B,MAAM5B,EAASG,EAXf,EACJ,EACA,GAWH,O,kCAGGL,GACV,IAAM+B,EAAO9B,KAAKgB,MAAMC,QAClBhB,EAAUD,KAAKN,MAAMqC,MACrB3B,EAAOJ,KAAKN,MAAMU,KACpBJ,KAAKgC,gBAAgB/B,EAASG,IAASH,EAAQF,KAInDE,EAAQF,GAAKC,KAAKgB,MAAMG,QAAU,IAAM,IACxCW,EAAKzB,KAAKN,GACVC,KAAKiC,SAAS,CACZF,MAAO9B,EACPgB,QAASa,EACTZ,WAAYlB,KAAKgB,MAAMC,QAAQiB,OAC/Bf,SAAUnB,KAAKgB,MAAMG,a,6BAIlBF,EAASc,EAAOI,GACrB,IAAK,IAAIpC,EAAIkB,EAAQiB,OAAS,EAAGnC,GAAKoC,EAAMpC,IAC1CgC,EAAMd,EAAQmB,OAAS,KAEzBpC,KAAKiC,SAAS,CACZf,WAAYiB,EACZhB,QAASgB,EAAO,IAAM,M,+BAIhB,IAiBJE,EAjBG,OACDN,EAAQ/B,KAAKN,MAAMqC,MACnBd,EAAUjB,KAAKgB,MAAMC,QACrBb,EAAOJ,KAAKN,MAAMU,KAClBkC,EAAStC,KAAKgC,gBAAgBD,EAAO3B,GACrCmC,EAAQtB,EAAQuB,KAAI,SAACL,EAAMM,GAC/B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,UAE5C,OACE,wBAAIE,IAAKF,GACP,4BAAQ7C,QAAS,kBAAM,EAAKgD,OAAO3B,EAASc,EAAOU,KAChDC,OAWT,OAHKL,EADLC,EACc,WAAaA,EACb,iBAAmBtC,KAAKgB,MAAMG,QAAU,IAAM,KAG1D,yBAAKxB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACES,KAAMJ,KAAKN,MAAM2B,WACjBpB,QAAS8B,EACTnC,QAAS,SAACG,GAAD,OAAO,EAAK8C,YAAY9C,OAGrC,yBAAKJ,UAAU,aACb,6BAAM0C,GACN,6BAAMjC,EAAN,aACA,4BAAKmC,S,GArLmB1B,IAAMC,YCAnBgC,G,wDACnB,WAAYpD,GAAQ,IAAD,8BACjB,cAAMA,IACDsB,MAAQ,CAAEZ,KAAM,EAAG2C,QAAS,EAAGhB,MAAO,IAC3C,EAAKiB,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKJ,YAAc,EAAKA,YAAYI,KAAjB,gBAJF,E,8DAODC,GAChB,IAAMrD,EAAQqD,EAAMC,OAAOtD,MACrBuD,EAAOF,EAAMC,OAAOC,KAC1BpD,KAAKiC,SAAL,eACGmB,EAAOvD,M,kCAIAwD,GACVA,EAAEC,iBACEC,OAAOC,QAAQ,yCACbxD,KAAKyD,KAAKrD,KAAKP,MAAQ,GAAKG,KAAKyD,KAAKrD,KAAKP,MAAQ,GACrD6D,MAAM,aAEN1D,KAAKiC,SAAS,CACZ7B,KAAMJ,KAAKyD,KAAKrD,KAAKP,MACrBkC,MAAO,Q,+BAMN3B,GAEP,IADA,IAAIuD,EAAM,GACD5D,EAAI,EAAGA,GAAKK,EAAML,IACzB4D,EAAItD,KAAK,4BAAQR,MAAOE,GAAIA,IAE9B,OAAO4D,I,+BAGC,IAAD,OACP,OACE,yBAAKhE,UAAU,cACb,yBAAKA,UAAU,aAAf,eACA,8BACE,2BAAOA,UAAU,QAAjB,aAEE,6BACA,2BAAOiE,IAAI,OAAOC,KAAK,WACvB,4BACElE,UAAU,SACVC,QAAS,SAACyD,GACR,EAAKR,YAAYQ,KAHrB,YAWJ,2BAAO1D,UAAU,OACf,4BACEA,UAAU,aACVyD,KAAK,UACLvD,MAAOG,KAAKgB,MAAM+B,QAClBe,SAAU9D,KAAKgD,mBAEdhD,KAAK+D,SAAS/D,KAAKgB,MAAMZ,OAP9B,WAUE,8BAGF,kBAAC,EAAD,CACEA,KAAMM,SAASV,KAAKgB,MAAM+B,SAC1B1B,WAAYX,SAASV,KAAKgB,MAAMZ,MAChC2B,MAAO/B,KAAKgB,MAAMe,a,GA1EQlB,IAAMC,YCK1CkD,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,W","file":"static/js/main.4ccc731a.chunk.js","sourcesContent":["import React from 'react';\nimport './square.css'\n\nexport default function Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n","import React from 'react';\nimport Square from '../square/square';\nimport './board.css';\n\nexport default class Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n  create_rq(start, end) {\n    let rows = [];\n    for (let i = start; i < end; i++) {\n      rows.push(this.renderSquare(i));\n    }\n    return rows;\n  }\n  create_row(start) {\n    let board_r = [];\n    for (let i = 0; i < start; i++) {\n      let new_r = i * start;\n      let new_end = parseInt(new_r) + parseInt(start);\n      board_r.push(\n        <div className=\"board-row\">{this.create_rq(new_r, new_end)}</div>\n      );\n    }\n    return board_r;\n  }\n  render() {\n    return <div>{this.create_row(this.props.rows)}</div>;\n  }\n}\n","import React from 'react';\nimport Board from '../board/board';\nimport './game.css';\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [], // track the last index\n      stepNumber: 0, // count var\n      xIsNext: true,\n    };\n  }\n\n  hor(squares, row_length, board_rows, count, x, o) {\n    let index = 0;\n    for (let i = 0; i < board_rows; i++) {\n      for (let j = 0; j < board_rows; j++) {\n        if (squares[index] === 'X') {\n          x++;\n          o = 0;\n          count++;\n        } else if (squares[index] === 'O') {\n          o++;\n          x = 0;\n          count++;\n        } else {\n          count = 0;\n        }\n        index++;\n        if (o >= row_length && count >= row_length) {\n          return 'O';\n        }\n        if (x >= row_length && count >= row_length) {\n          return 'X';\n        }\n      }\n      x = 0;\n      o = 0;\n    }\n  }\n\n  vert(squares, row_length, board_rows, count, x, o) {\n    for (let i = 0; i < board_rows; i++) {\n      for (let j = i; j < board_rows ** 2; j += board_rows) {\n        if (squares[j] === 'X') {\n          x++;\n          o = 0;\n          count++;\n        } else if (squares[j] === 'O') {\n          o++;\n          x = 0;\n          count++;\n        } else {\n          count = 0;\n        }\n        if (o >= row_length && count >= row_length) {\n          return 'O';\n        }\n        if (x >= row_length && count >= row_length) {\n          return 'X';\n        }\n      }\n      x = 0;\n      o = 0;\n    }\n  }\n\n  cross(squares, row_length, count, x, o) {\n    for (let i = 0; i < row_length ** 2; i += row_length + 1) {\n      if (squares[i] === 'X') {\n        x++;\n      }\n      if (squares[i] === 'O') {\n        o++;\n      }\n      count++;\n    }\n    if (o === row_length) {\n      return 'O';\n    }\n    if (x === row_length) {\n      return 'X';\n    }\n    o = 0;\n    x = 0;\n\n    for (let j = row_length - 1; j < row_length ** 2 - 1; j += row_length - 1) {\n      if (squares[j] === 'X') {\n        x++;\n      }\n      if (squares[j] === 'O') {\n        o++;\n      }\n      count++;\n    }\n    if (o === row_length) {\n      return 'O';\n    }\n    if (x === row_length) {\n      return 'X';\n    }\n    o = 0;\n    x = 0;\n  }\n\n  calculateWinner(squares, rows) {\n    const count = 0;\n    const x = 0;\n    const o = 0;\n    const board_rows = this.props.board_rows;\n    if (this.hor(squares, rows, board_rows, count, x, o)) {\n      return this.hor(squares, rows, board_rows, count, x, o);\n    }\n    if (this.vert(squares, rows, board_rows, count, x, o)) {\n      return this.vert(squares, rows, board_rows, count, x, o);\n    }\n    if (this.cross(squares, rows, count, x, o)) {\n      return this.cross(squares, rows, count, x, o);\n    }\n    return null;\n  }\n\n  handleClick(i) {\n    const hist = this.state.history;\n    const squares = this.props.board;\n    const rows = this.props.rows;\n    if (this.calculateWinner(squares, rows) || squares[i]) {\n      // ends the game\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    hist.push(i);\n    this.setState({\n      board: squares,\n      history: hist,\n      stepNumber: this.state.history.length,\n      xIsNext: !this.state.xIsNext, // changes turn\n    });\n  }\n\n  jumpTo(history, board, step) {\n    for (let i = history.length - 1; i >= step; i--) {\n      board[history.pop()] = null;\n    }\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const board = this.props.board;\n    const history = this.state.history;\n    const rows = this.props.rows;\n    const winner = this.calculateWinner(board, rows);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Refresh';\n\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(history, board, move)}>\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    winner\n      ? (status = 'Winner: ' + winner)\n      : (status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O'));\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            rows={this.props.board_rows}\n            squares={board}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <div>{rows} in a row</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Game from '../game/game';\nimport './getDim.css';\n\nexport default class GetDim extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { rows: 3, winning: 3, board: [] };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleInputChange(event) {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    if (window.confirm('It will refresh the game! Continue?')) {\n      if (this.refs.rows.value < 3 || this.refs.rows.value > 10) {\n        alert('3-10 only');\n      } else {\n        this.setState({\n          rows: this.refs.rows.value,\n          board: [],\n        });\n      }\n    }\n  }\n\n  how_many(rows) {\n    let how = [];\n    for (let i = 3; i <= rows; i++) {\n      how.push(<option value={i}>{i}</option>);\n    }\n    return how;\n  }\n\n  render() {\n    return (\n      <div className=\"submission\">\n        <div className=\"game_name\">Tic Tac Toe</div>\n        <form>\n          <label className=\"size\">\n            Board Size\n            <br />\n            <input ref=\"rows\" type=\"number\" />\n            <button\n              className=\"submit\"\n              onClick={(e) => {\n                this.handleClick(e);\n              }}\n            >\n              Change\n            </button>\n          </label>\n        </form>\n\n        <label className=\"win\">\n          <select\n            className=\"win_select\"\n            name=\"winning\"\n            value={this.state.winning}\n            onChange={this.handleInputChange}\n          >\n            {this.how_many(this.state.rows)}\n          </select>\n          In a Row\n          <br />\n        </label>\n\n        <Game\n          rows={parseInt(this.state.winning)}\n          board_rows={parseInt(this.state.rows)}\n          board={this.state.board}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GetDim from './components/getDim/getDim';\n\n// ========================================\n\n// renders the game component to element\n\nReactDOM.render(<GetDim />, document.getElementById('root'));\n"],"sourceRoot":""}